{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<center> <h1>ðŸ“© Naive Bayes ðŸ“©</h1> </center>","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"<p> <center> This notebook is in <span style=\"color: green\"> <b> Active </b> </span> state of development! </center> </p>  \n<p> <center> Be sure to checkout my other notebooks for <span style=\"color: blue\"> <b> knowledge, insight and laughter </b> </span>! ðŸ§ ðŸ’¡ðŸ˜‚</center> </p> ","metadata":{}},{"cell_type":"markdown","source":"<center> <img src=\"https://www2.isye.gatech.edu/isyebayes/bank/bayesfun.jpg\" width=\"625\" height=\"625\" /> </center>","metadata":{}},{"cell_type":"markdown","source":"<hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">","metadata":{}},{"cell_type":"markdown","source":"# Aim","metadata":{}},{"cell_type":"markdown","source":"The aim is to provide, from scratch, code implementations for linear regression problems. This will involve both the main functions needed to solve a linear regression and some additional utility functions as well.\n\n**Note**: We will not be diving into in-depth exploratory data analysis, feature engineering etc... in these notebooks and so will not be commenting extensively on things such as skewness, kurtosis, homoscedasticity etc...","metadata":{}},{"cell_type":"markdown","source":"<hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">","metadata":{}},{"cell_type":"markdown","source":"# Background","metadata":{}},{"cell_type":"markdown","source":"Naive Bayes is a classification algorithm based on Bayes' theorem. Bayesâ€™ theorem provides a way to calculate the probability of a data point belonging to a given class, given our prior knowledge. It is defined as\n\n$$\n\\mathbb P (class|data) = \\frac{\\mathbb P (data|class) \\ \\mathbb P (class)}{\\mathbb P (data)} ,\n$$\n\nwhere $\\mathbb P (class | data)$ is the probability over the potential classes given the provided data. The different probabilities $\\mathbb P$ you see in the equations above are commonly called prior, likelihood, evidence, and posterior as follows.\n\n$$\n\\overbrace{\\mathbb P (class|data)}^{\\text{posterior}} = \\frac{\\overbrace{\\mathbb P (data|class)}^{\\text{likelihood}} \\ \\overbrace{\\mathbb P (class)}^{\\text{prior}}}{\\underbrace{\\mathbb P (data)}_{\\text{evidence}}}\n$$\n\nThe algorithm is 'naive', because of its assumption that features of data are independent given the class label. This idea helps us simplify the likelihood event. Let us call the data features $x_1, \\dots, x_i, \\dots, x_n$ and the class label $y$, and rewrite Bayes theorem in these terms:\n\n$$\n\\mathbb P (y|x_1, \\dots, x_n) = \\frac{\\mathbb P (x_1, \\dots, x_n|y) * \\mathbb P (y)}{\\mathbb P (x_1, \\dots, x_n)} \\, . \n$$\n\nThen, the naive assumption of conditional independence between any two features given the class label can be expressed as\n\n$$\n\\mathbb P(x_i | y, x_1, \\dots, x_{i-1}, x_{i+1}, \\dots, x_n) = \\mathbb P (x_i | y) \\, .\n$$\n\nFor all $i$, we can simply write Bayes' theorem as:\n\n$$\n\\mathbb P (y | x_1, \\dots, x_n) = \\frac{\\mathbb P (y) \\prod_{i=1}^n \\mathbb P(x_i | y)}{\\mathbb P (x_1, \\dots, x_n)} \\, .\n$$\n\nSince $\\mathbb P (x_1, \\dots, x_n)$ is the constant input, we can define the following proportional relationship\n\n$$\n\\mathbb P (y|x_1, \\dots, x_n) \\propto \\mathbb P (y) \\prod_{i=1}^n \\mathbb P(x_i | y) \\, ,\n$$\n\nand can use it to classify any data point as\n\n$$\n\\hat y = \\underset{y}{\\text{arg max}} \\ \\mathbb P (y) \\prod_{i=1}^n \\mathbb P(x_i | y) \\, .\n$$\n\n**Note:** Naive Bayes can indeed be used for multiclass classification, however we use it here as a binary classifier._ ","metadata":{}},{"cell_type":"markdown","source":"<hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">","metadata":{}},{"cell_type":"markdown","source":"## Import Modules","metadata":{}},{"cell_type":"code","source":"# Importing standard packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport copy\nfrom typing import Callable, List, Dict, Tuple\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.utils.validation import check_X_y, check_array\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.624757Z","iopub.execute_input":"2021-09-01T00:41:20.625226Z","iopub.status.idle":"2021-09-01T00:41:20.63146Z","shell.execute_reply.started":"2021-09-01T00:41:20.625179Z","shell.execute_reply":"2021-09-01T00:41:20.630345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Collection","metadata":{}},{"cell_type":"code","source":"# Import dataset\ndf = pd.read_csv('../input/sms-spam-collection-dataset/spam.csv')\n# Display dataframe\ndf","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.632972Z","iopub.execute_input":"2021-09-01T00:41:20.63331Z","iopub.status.idle":"2021-09-01T00:41:20.676429Z","shell.execute_reply.started":"2021-09-01T00:41:20.633276Z","shell.execute_reply":"2021-09-01T00:41:20.6754Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Unlike our other datasets in the other notebooks, the target variable is in the first column (and not in the last column) and so our data processing will be slightly different. If you want, you can just switch the columns and then use code from the other notebooks to proceed with data processing. ","metadata":{}},{"cell_type":"markdown","source":"# Data Processing","metadata":{}},{"cell_type":"code","source":"# Remove unneccesary columns\ndf = df.iloc[:,:2]","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.677794Z","iopub.execute_input":"2021-09-01T00:41:20.678171Z","iopub.status.idle":"2021-09-01T00:41:20.682944Z","shell.execute_reply.started":"2021-09-01T00:41:20.678137Z","shell.execute_reply":"2021-09-01T00:41:20.681846Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.687165Z","iopub.execute_input":"2021-09-01T00:41:20.687685Z","iopub.status.idle":"2021-09-01T00:41:20.703328Z","shell.execute_reply.started":"2021-09-01T00:41:20.687635Z","shell.execute_reply":"2021-09-01T00:41:20.702159Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Â To make dataset binary, change ham 0 and spam to 1\ndf = df.replace(\"ham\", 0)\ndf = df.replace(\"spam\", 1)","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.705126Z","iopub.execute_input":"2021-09-01T00:41:20.705451Z","iopub.status.idle":"2021-09-01T00:41:20.715777Z","shell.execute_reply.started":"2021-09-01T00:41:20.705418Z","shell.execute_reply":"2021-09-01T00:41:20.714972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check for Nulls\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.717114Z","iopub.execute_input":"2021-09-01T00:41:20.717451Z","iopub.status.idle":"2021-09-01T00:41:20.734988Z","shell.execute_reply.started":"2021-09-01T00:41:20.717416Z","shell.execute_reply":"2021-09-01T00:41:20.734132Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check for NaNs \ndf.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.736174Z","iopub.execute_input":"2021-09-01T00:41:20.736681Z","iopub.status.idle":"2021-09-01T00:41:20.750612Z","shell.execute_reply.started":"2021-09-01T00:41:20.736642Z","shell.execute_reply":"2021-09-01T00:41:20.749837Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check for duplicates\ndf.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.751787Z","iopub.execute_input":"2021-09-01T00:41:20.752256Z","iopub.status.idle":"2021-09-01T00:41:20.768813Z","shell.execute_reply.started":"2021-09-01T00:41:20.752211Z","shell.execute_reply":"2021-09-01T00:41:20.767995Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Drop duplicates\ndf = df.drop_duplicates().reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.770118Z","iopub.execute_input":"2021-09-01T00:41:20.770608Z","iopub.status.idle":"2021-09-01T00:41:20.78213Z","shell.execute_reply.started":"2021-09-01T00:41:20.770572Z","shell.execute_reply":"2021-09-01T00:41:20.780951Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.783553Z","iopub.execute_input":"2021-09-01T00:41:20.783947Z","iopub.status.idle":"2021-09-01T00:41:20.800832Z","shell.execute_reply.started":"2021-09-01T00:41:20.783907Z","shell.execute_reply":"2021-09-01T00:41:20.799722Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bar chart of class ratio \ntarget_pd = pd.DataFrame(index = [\"Not Spam\",\"Spam\"], columns= [\"Quantity\", \"Percentage\"])\n# Not spam\ntarget_pd.loc[\"Not Spam\"][\"Quantity\"] = len(df[df.columns[0]][df[df.columns[0]]==0].dropna())\ntarget_pd.loc[\"Not Spam\"][\"Percentage\"] = target_pd.iloc[0,0]/len(df[df.columns[0]])*100\n# Spam\ntarget_pd.loc[\"Spam\"][\"Quantity\"] = len(df[df.columns[0]][df[df.columns[0]]==1].dropna())\ntarget_pd.loc[\"Spam\"][\"Percentage\"] = target_pd.iloc[1,0]/len(df[df.columns[0]])*100\n# Plot barchart\nfig = plt.figure(figsize = (10, 5))\nplt.bar(list(target_pd.index), target_pd.iloc[:,0], color =[\"maroon\", \"blue\"], width = 0.4)\nplt.ylabel(\"Number of cases\")\nplt.title(\"Distribution of disease and non-disease cases\");\n# Print the dataframe\ntarget_pd","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2021-09-01T00:41:20.802318Z","iopub.execute_input":"2021-09-01T00:41:20.80303Z","iopub.status.idle":"2021-09-01T00:41:20.952583Z","shell.execute_reply.started":"2021-09-01T00:41:20.802983Z","shell.execute_reply":"2021-09-01T00:41:20.951749Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Again, like most of the other datasets we have been dealing with in other notebooks, we have a highly imbalanced dataset, with more \"no spam\" emails than \"spam\". We will continue with our models, without using imbalanced classification techniques such as SMOTE, ADASYN etc...","metadata":{}},{"cell_type":"markdown","source":"## Splitting dataset","metadata":{}},{"cell_type":"markdown","source":"For most machine learning models, we would like them to have low bias and low variance - that is, the model should perform well on the training set (low bias) and also the test set, alongside with other new random test sets (low variance). Therefore, to test for bias and variance of our model, we shall split the dataset into training and test set. We will not be tuning any hyperparameters (and thus do not need a validation set).  We will not be tuning any hyperparameters (and thus do not need a validation set). \n\nFor these functions, the $X$ dataset (of features) should have a column 1's as the first column to account for the bias term/intercept co-efficient. Before this occurs, one should check the order of magnitude of the features - if they differ hugely, one must apply feature scaling. Having looked at the data however, we can see that since we have merely categorical features, there is no need for feature scaling. ","metadata":{}},{"cell_type":"code","source":"#Â Create X (emails) and y (binary target) dataset\nX = df[df.columns[-1]]\ny = df[df.columns[:-1]]","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.953787Z","iopub.execute_input":"2021-09-01T00:41:20.954302Z","iopub.status.idle":"2021-09-01T00:41:20.960213Z","shell.execute_reply.started":"2021-09-01T00:41:20.954258Z","shell.execute_reply":"2021-09-01T00:41:20.959007Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Split the dataset into training and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/4, random_state=42, stratify=y)\n# Re-index\nX_train = X_train.reset_index(drop=True) \ny_train = y_train.reset_index(drop=True) \nX_test = X_test.reset_index(drop=True) \ny_test = y_test.reset_index(drop=True) ","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:20.961481Z","iopub.execute_input":"2021-09-01T00:41:20.961832Z","iopub.status.idle":"2021-09-01T00:41:21.011704Z","shell.execute_reply.started":"2021-09-01T00:41:20.961799Z","shell.execute_reply":"2021-09-01T00:41:21.010734Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Vocabulary List","metadata":{}},{"cell_type":"markdown","source":"The first job is to create a vocabulary list of all the possible words that are contained in the dataset.","metadata":{}},{"cell_type":"code","source":"def vocab_list(X: pd.Series) -> List[str]:\n    \n    \"\"\" Returns every word in the dataset on it's own as a string in a list. \"\"\"\n    \n    #Â Create copy to not override X dataframe\n    X_copy = X.copy(deep=True)\n    for i in range(len(X_copy)):\n        X_copy[i] = X[i].split()\n    #Â Flatten the list of lists \n    vocabs = [vocab for sublist in X_copy.tolist() for vocab in sublist]\n    # Remove duplicates \n    vocabs = [i for n, i in enumerate(vocabs) if i not in vocabs[:n]]\n    return vocabs","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:21.013047Z","iopub.execute_input":"2021-09-01T00:41:21.013353Z","iopub.status.idle":"2021-09-01T00:41:21.022326Z","shell.execute_reply.started":"2021-09-01T00:41:21.013324Z","shell.execute_reply":"2021-09-01T00:41:21.021299Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Word Count","metadata":{}},{"cell_type":"markdown","source":"Now that we have the vocabulary list, we can now calculate the number of occurences of each word per sentence. We will use the help of **one** in-built sk-learn function for now (till we work out how to create our own one). ","metadata":{}},{"cell_type":"code","source":"def word_count(X: pd.Series, y: pd.Series, vocab_list: List, show_X: bool) -> Tuple:\n    \n    \"\"\" Return word count of email dataset. \"\"\"\n    \n    #Â Convert a collection of text documents to a matrix of token counts\n    vectorizer = CountVectorizer(vocabulary=vocab_list)\n    word_counts = vectorizer.fit_transform(X.tolist()).toarray()\n    df = pd.DataFrame(word_counts, columns=vocab_list)\n    #Â Function to transform new test data into word count matrix\n    msg_tx_func = lambda x: vectorizer.transform(x).toarray()\n    if show_X:\n        display(df)\n    return df.to_numpy(), np.array(y), msg_tx_func","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:21.023644Z","iopub.execute_input":"2021-09-01T00:41:21.024158Z","iopub.status.idle":"2021-09-01T00:41:21.034511Z","shell.execute_reply.started":"2021-09-01T00:41:21.02411Z","shell.execute_reply":"2021-09-01T00:41:21.033418Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Classification Prior & Likelihood","metadata":{}},{"cell_type":"markdown","source":"Next, we train the Naive Bayes classifier, where we define the prior and likelihood. The prior is the probability distribution incorporating our knowledge of the data. Consequently, we use the available training set to define it.","metadata":{}},{"cell_type":"code","source":"def prior_lh(X: pd.Series, y: pd.Series) -> Tuple:\n    \n    \"\"\" Use training data for Naive Bayes classifier. \"\"\"\n\n    n = X.shape[0]\n    # Re-order X as a 2-dimensional array; each dimension contains data examples of only one of our two classes i.e. X_by_class[0] = non-spam and X_by_class[1] = spam\n    X_by_class = np.array([X[y==c] for c in np.unique(y)])\n    # Define prior\n    prior = np.array([len(X_class)/n for X_class in X_by_class]) \n    # Count words in each class\n    word_counts = np.array([sub_arr.sum(axis=0) for sub_arr in X_by_class])\n    # Define likelihood\n    lh_word = word_counts / word_counts.sum(axis=1).reshape(-1, 1)\n    return prior, lh_word","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:21.035805Z","iopub.execute_input":"2021-09-01T00:41:21.036359Z","iopub.status.idle":"2021-09-01T00:41:21.051243Z","shell.execute_reply.started":"2021-09-01T00:41:21.036327Z","shell.execute_reply":"2021-09-01T00:41:21.049853Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Classification Posterior","metadata":{}},{"cell_type":"markdown","source":"We compute the last part of the Bayes Theorem component, which is the posterior.","metadata":{}},{"cell_type":"code","source":"def posterior(X: pd.DataFrame, prior: np.array, lh_word: np.array) -> np.array:\n    \n    \"\"\" Predict probability of class. \"\"\"\n    \n    # Loop over each observation to calculate conditional probabilities\n    class_numerators = np.zeros(shape=(X.shape[0], prior.shape[0]))\n    for i, x in enumerate(X):\n        # Count how often words appear in each email\n        word_exists = x.astype(bool)\n        # Compute likelihoods of words (probability of data appearing in any class)\n        lh_words_present = lh_word[:, word_exists] ** x[word_exists]\n        # Compute likelihood of entire message with likelihoods of words\n        lh_message = (lh_words_present).prod(axis=1)\n        # Combine likelihood and prior to numerator\n        class_numerators[i] = lh_message * prior ## \n    normalize_term = class_numerators.sum(axis=1).reshape(-1, 1)\n    posteriors = class_numerators / normalize_term\n    if not (posteriors.sum(axis=1) - 1 < 1e-5).all():\n        raise ValueError('Rows should sum to 1')\n    return posteriors","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:21.05274Z","iopub.execute_input":"2021-09-01T00:41:21.053124Z","iopub.status.idle":"2021-09-01T00:41:21.063896Z","shell.execute_reply.started":"2021-09-01T00:41:21.053064Z","shell.execute_reply":"2021-09-01T00:41:21.062642Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Classification Prediction","metadata":{}},{"cell_type":"markdown","source":"Putting all of this together, we can now predict in a binary fashion by asserting any data points to the class with the highest probability. Here, we take our emails we trained our Naive Bayes classifier on also to evaluate it, but the evaluation normally happens on unseen emails.","metadata":{}},{"cell_type":"code","source":"def predict(X: np.array, y: np.array) -> np.array:\n    \n    \"\"\" Predict class with highest probability. \"\"\"\n    \n    y_pred  = posterior(X, y).argmax(axis=1)\n    return y_pred","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:21.065052Z","iopub.execute_input":"2021-09-01T00:41:21.065536Z","iopub.status.idle":"2021-09-01T00:41:21.079001Z","shell.execute_reply.started":"2021-09-01T00:41:21.065493Z","shell.execute_reply":"2021-09-01T00:41:21.077852Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Full Naive Bayes Classifier Model","metadata":{}},{"cell_type":"code","source":"class NaiveBayesClassifier():\n    \n    def __init__(self):\n    \n        \"\"\" Initialise parameters. \"\"\"\n       \n        self._vocab_list = None\n        self._word_count = None\n        self._prior = None\n        self._lh = None\n        self._posteriors = None\n        \n    def fit(self, X: pd.Series, y: pd.Series) -> np.array:\n    \n        \"\"\" Fit Naive bayes model. \"\"\"\n\n        #Â Allocate initialised parameters\n        self._vocabs = self.vocab_list(X)\n        self._word_matrix = self.word_count(X, y, self._vocabs, show_X=False)[0]\n        self._prior = self.prior_lh(self._word_matrix, y)[0]\n        self._lh = self.prior_lh(self._word_matrix, y)[1]\n        self._posteriors = self.posterior(self._word_matrix, y, self._prior, self._lh)\n    \n    def predict(self) -> np.array:\n    \n        \"\"\" Predict class with highest probability. \"\"\"\n\n        y_pred = self._posteriors.argmax(axis=1)\n        return y_pred\n    \n        \n    def vocab_list(self, X: pd.Series) -> List[str]:\n    \n        \"\"\" Returns every word in the dataset on it's own as a string in a list. \"\"\"\n\n        #Â Create copy to not override X dataframe\n        X_copy = X.copy(deep=True)\n        for i in range(len(X_copy)):\n            X_copy[i] = X[i].split()\n        #Â Flatten the list of lists \n        vocabs = [vocab for sublist in X_copy.tolist() for vocab in sublist]\n        # Remove duplicates \n        vocabs = [i for n, i in enumerate(vocabs) if i not in vocabs[:n]]\n        return vocabs\n\n    def word_count(self, X: pd.Series, y: pd.Series, vocab_list: List, show_X: bool) -> Tuple:\n    \n        \"\"\" Return word count of email dataset. \"\"\"\n\n        #Â Convert a collection of text documents to a matrix of token counts\n        vectorizer = CountVectorizer(vocabulary=vocab_list)\n        word_counts = vectorizer.fit_transform(X.tolist()).toarray()\n        df = pd.DataFrame(word_counts, columns=vocab_list)\n        #Â Function to transform new test data into word count matrix\n        msg_tx_func = lambda x: vectorizer.transform(x).toarray()\n        if show_X:\n            display(df)\n        return df.to_numpy(), np.array(y), msg_tx_func\n    \n    def prior_lh(self, word_matrix: pd.DataFrame, y: pd.Series) -> Tuple:\n\n        \"\"\" Use training data for Naive Bayes classifier. \"\"\"\n        \n        n = X.shape[0]\n        # Re-order X as a 2-dimensional array; each dimension contains data examples of only one of our two classes i.e. X_by_class[0] = non-spam and X_by_class[1] = spam\n        X_no_spam = np.array(word_matrix[y[y==0].dropna().index.tolist(),:])\n        X_spam = np.array(word_matrix[y[y==1].dropna().index.tolist(),:])\n        X_by_class = np.array([X_no_spam, X_spam], dtype= \"object\")\n        # Define prior\n        prior = np.array([len(X_class)/n for X_class in X_by_class]) \n        # Count words in each class\n        word_counts = np.array([sub_arr.sum(axis=0) for sub_arr in X_by_class])\n        # Define likelihood\n        lh_word = word_counts / word_counts.sum(axis=1).reshape(-1, 1)\n        return prior, lh_word\n    \n    def posterior(self, word_matrix: pd.DataFrame, y: pd.Series, prior: np.array, lh_word: np.array) -> np.array:\n    \n        \"\"\" Predict probability of class. \"\"\"\n\n         # Loop over each observation to calculate conditional probabilities\n        class_numerators = np.zeros(shape=(word_matrix.shape[0], prior.shape[0]))\n        for i, x in enumerate(word_matrix):\n            # Count how often words appear in each email\n            word_exists = x.astype(bool)\n            # Compute likelihoods of words (probability of data appearing in any class)\n            lh_words_present = lh_word[:, word_exists] ** x[word_exists]\n            # Compute likelihood of entire message with likelihoods of words\n            lh_message = (lh_words_present).prod(axis=1)\n            # Combine likelihood and prior to numerator\n            class_numerators[i] = lh_message * prior ## \n        normalize_term = class_numerators.sum(axis=1).reshape(-1, 1)\n        posteriors = class_numerators / normalize_term\n        if not (posteriors.sum(axis=1) - 1 < 1e-3).all():\n            raise ValueError('Rows should sum to 1')\n        return posteriors","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:21.080803Z","iopub.execute_input":"2021-09-01T00:41:21.081281Z","iopub.status.idle":"2021-09-01T00:41:21.106074Z","shell.execute_reply.started":"2021-09-01T00:41:21.081231Z","shell.execute_reply":"2021-09-01T00:41:21.105178Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model Testing and Results","metadata":{}},{"cell_type":"code","source":"# Instantiate training model\nspam_model_train = NaiveBayesClassifier()\n# Fit model to training dataset to obtain Bayes Theorem components\nspam_model_train.fit(X_train, y_train)\n# Return training predictions\ny_pred_train = spam_model_train.predict()","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:21.10751Z","iopub.execute_input":"2021-09-01T00:41:21.108191Z","iopub.status.idle":"2021-09-01T00:41:38.596939Z","shell.execute_reply.started":"2021-09-01T00:41:21.10814Z","shell.execute_reply":"2021-09-01T00:41:38.596063Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print train confusion matrix\ncm_train = confusion_matrix(y_train, y_pred_train)\nax = sns.heatmap(cm_train, annot=True, fmt=\".1f\")\nax.set(xlabel=\"Predicted Labels\", ylabel=\"True Labels\");","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:38.598106Z","iopub.execute_input":"2021-09-01T00:41:38.598553Z","iopub.status.idle":"2021-09-01T00:41:38.857402Z","shell.execute_reply.started":"2021-09-01T00:41:38.598506Z","shell.execute_reply":"2021-09-01T00:41:38.856357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print train metric report\npd.DataFrame(classification_report(y_train, y_pred_train, output_dict=True))","metadata":{"execution":{"iopub.status.busy":"2021-09-01T00:41:38.858976Z","iopub.execute_input":"2021-09-01T00:41:38.85938Z","iopub.status.idle":"2021-09-01T00:41:38.884582Z","shell.execute_reply.started":"2021-09-01T00:41:38.859336Z","shell.execute_reply":"2021-09-01T00:41:38.883514Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Summary","metadata":{}},{"cell_type":"markdown","source":"- It is easy and fast to predict class of test data set. \n- When assumption of independence holds, a Naive Bayes classifier performs better compare to other models like logistic regression and you need less training data.\n- A limitation of Naive Bayes is the assumption of independent predictors. In real life, it is almost impossible that we get a set of predictors which are completely independent.\n- Another limitation is that if there is a category in the test data set that never appeared in the training set, then the probability output will always be 0 (which is not accurate).","metadata":{}},{"cell_type":"markdown","source":"<hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">","metadata":{}},{"cell_type":"markdown","source":"## Extra","metadata":{}},{"cell_type":"markdown","source":"Some comments about the code implementations:\n\n1. If dealing with arrays rather than dataframes, some of the functions may need altering to account for dimension/shape issues e.g. the _prior lh_ and _posterior_ functions.  \n2. To debug this, it is important to print out the _word count_ and _X by class_ so you can check if you are obtaining the correct outputs. ","metadata":{}},{"cell_type":"markdown","source":"<hr style=\"height:2px;border-width:0;color:gray;background-color:gray\">","metadata":{}},{"cell_type":"markdown","source":"Thanks for reading this notebook. If there are any mistakes or things that need more clarity, feel free to respond in the comment section and I will be happy to reply.\n\nAs always, please leave an upvote - it would also be helpful if you cite this documentation if you are going to use any of the code. ðŸ˜Š\n\n#CodeWithSid","metadata":{}}]}